Go programming patterns
Dec 29, 2020

罗健文

* Overview

- GopherChina 2020
- Go programming patterns

* GopherChina 2020

.image img/gopherchina.jpg

* GopherChina 2020

.image img/gopher-china.png

* Go programming patterns

.image img/haozishu.jpg

* Go programming patterns

.image img/creators.jpg

* Go programming patterns

.image img/robot.jpg

* Topics

- Error Handing
- Functional Options

* Error Handing

Go 语言的函数支持多返回值，所以，可以在返回接口把业务语义（业务返回值）和控制语义（出错返回值）区分开来。Go 语言的很多函数都会返回 result, err 两个值。

- 参数上基本上就是入参，而返回接口把结果和错误分离，这样使得函数的接口语义清晰；
- 而且，Go 语言中的错误参数如果要忽略，需要显式地忽略，用 _ 这样的变量来忽略；
- 另外，因为返回的 error 是个接口（其中只有一个方法 Error()，返回一个 string ），所以你可以扩展自定义的错误处理。

* Error Handing

如果一个函数返回了多个不同类型的 error，可以这样做：

    if err != nil {
    switch err.(type) {
        case *json.SyntaxError:
        ...
        case *ZeroDivisionError:
        ...
        case *NullPointerError:
        ...
        default:
        ...
    }
    }

* Error Check Hell
    func parse(r io.Reader) (*Point, error) {

        var p Point

        if err := binary.Read(r, binary.BigEndian, &p.Longitude); err != nil {
            return nil, err
        }
        if err := binary.Read(r, binary.BigEndian, &p.Latitude); err != nil {
            return nil, err
        }
        if err := binary.Read(r, binary.BigEndian, &p.Distance); err != nil {
            return nil, err
        }
        if err := binary.Read(r, binary.BigEndian, &p.ElevationGain); err != nil {
            return nil, err
        }
        if err := binary.Read(r, binary.BigEndian, &p.ElevationLoss); err != nil {
            return nil, err
        }
    }

* Error Handing

可以通过函数式编程的方式

    func parse(r io.Reader) (*Point, error) {
        var p Point
        var err error
        read := func(data interface{}) {
            if err != nil {
                return
            }
            err = binary.Read(r, binary.BigEndian, data)
        }

        read(&p.Longitude)
        read(&p.Latitude)
        read(&p.Distance)
        read(&p.ElevationGain)
        read(&p.ElevationLoss)

        if err != nil {
            return &p, err
        }
        return &p, nil
    }

* Error Handing

    type Reader struct {
        r   io.Reader
        err error
    }

    func (r *Reader) read(data interface{}) {
        if r.err == nil {
            r.err = binary.Read(r.r, binary.BigEndian, data)
        }
    }

    func parse(input io.Reader) (*Point, error) {
        var p Point
        r := Reader{r: input}

        r.read(&p.Longitude)
        r.read(&p.Latitude)
        r.read(&p.Distance)
        r.read(&p.ElevationGain)
        r.read(&p.ElevationLoss)
        if r.err != nil {
            return nil, r.err
        }
        return &p, nil
    }    

* Error Handing

Article：

.link http://jxck.hatenablog.com/entry/golang-error-handling-lesson-by-rob-pike     golang-error-handling-lesson-by-rob-pike
.link https://coolshell.cn/articles/21140.html  Go编程模式——错误处理--左耳耗子
.link https://blog.golang.org/errors-are-values errors-are-values


* Functional Options

你有一个任务就是编写一些关键的服务组件，就像这样的代码：

    page gplusplus

    import "net"

    type Server struct {
        listener net.Listener
    }

    func (s *Server) Add() net.Addr
    func (s *Server) Shutdown()

    // NewServer returns a new Server listenering on addr.
    func NewServer(addr string) (*Server, error) {
        l, err := net.Listen("tcp", addr)
        if err !=nil {
            return nil, err
        }
        
        srv := Server{listener: l}
        go src.run()
        return &srv, nil
    }

* Functional Options

新需求来了

- does your server support TLS ?
- can I limit the number of clients ?
- can I specify the port ?
- can I set the timeout ?
- ... and more ...


    func NewServer(addr string, port int, maxconns int, timeout time.Duration, tls *tls.Config) (*Server, error) {
        //...
    }

* Functional Options
   
    // We need a number of New Server function for different senarios
    func NewServer(addr string, port int) (*Server, error) {
        //...
    }
    func NewTLSServer(addr string, port int, tls *tls.Config) (*Server, error) {
        //...
    }
    func NewServerWithTimeout(addr string, port int, timeout time.Duration) (*Server, error) {
        //...
    }
    func NewTLSServerWithMaxConnAndTimeout(addr string, port int, maxconns int, timeout time.Duration, tls *tls.Config) (*Server, error) {
        //...
    }

* One Popular Solution

    type Config struct {
        Protocol string
        Timeout  time.Duration
        Maxconns int
        TLS      *tls.Config
    }

    func NewServer(add string, port int, config *Config) (*Server, error) {
        //...
    }

    srv1, _ := NewServer("localhost", 9000, nil)
	conf := Config{Protocol: "tcp", Timeout: 60 * time.Second, Maxconns: 10}
	svc2, _ := NewServer("localhost", 9000, &conf)
    conf.Maxconns=15

* Functional Options

    func NewServer(add string, port int, config ...*Config) (*Server, error) {
        //...
    }

    func main() {
        svc1, _ := NewServer("localhost", 9000)
        svc2, _ := NewServer("localhost", 9000, &Config{
            Timeout:  10 * time.Second,
            Maxconns: 10,
        })
    }    

* Functional Options

    type Option func(*Server)

    func Protocol(p string) Option {
        return func(s *Server) {
            s.Protocol = p
        }
    }

    func Timeout(timeout time.Duration) Option {
        return func(s *Server) {
            s.Timeout = timeout
        }
    }

    func MaxConns(maxconns int) Option {
        return func(s *Server) {
            s.Maxconns = maxconns
        }
    }

    func TLS(tls *tls.Config) Option {
        return func(s *Server) {
            s.TLS = tls
        }
    }

* Functional Options

    func NewServer(addr string, port int, options ...func(*Server)) (*Server, error) {
        l, err := net.Listen("tcp", addr)
        if err !=nil {
            return nil, err
        }

        srv := Server{listener: l}
        for _, option := range options {
            option(&srv)
        }
        return &srv, nil
    }

Article：

.link https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html self-referential-functions-and-design--Robe Pike

.link https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis functional-options-for-friendly-apis--Dave Cheney

* Functional Options

.image img/options.png

* 资料

.link https://blog.csdn.net/u013164931/article/details/101004573  Golang中present工具--萝卜头LJW
.link https://github.com/robotLJW/GopherChina  GopherChina2020-ppt
.link https://coolshell.cn/ 左耳耗子的博客

